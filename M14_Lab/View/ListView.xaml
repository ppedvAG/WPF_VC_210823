<Window
    x:Class="M14_Lab.View.ListView"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:b="http://schemas.microsoft.com/xaml/behaviors"
    xmlns:conv="clr-namespace:M14_Lab.Converter"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:local="clr-namespace:M14_Lab.View"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    xmlns:vm="clr-namespace:M14_Lab.ViewModel"
    Title="ListView"
    Width="800"
    Height="450"
    mc:Ignorable="d">

    <!--  Das zugehörige ViewModel dient dieser Seite als DatenKontext  -->
    <Window.DataContext>
        <vm:ListViewModel />
    </Window.DataContext>

    <Window.Resources>
        <conv:ColorToBrushConverter x:Key="color2brush" />
    </Window.Resources>

    <DockPanel Margin="5">

        <Menu DockPanel.Dock="Top">
            <MenuItem Header="Datei">
                <MenuItem
                    x:Name="Mei_Beenden"
                    Command="{Binding SchliessenCmd}"
                    Header="Beenden" />
            </MenuItem>
        </Menu>

        <WrapPanel
            Margin="10,0,10,5"
            HorizontalAlignment="Right"
            DockPanel.Dock="Bottom">
            <Button
                x:Name="Btn_Neu"
                Command="{Binding NeuCmd}"
                Content="Neue Person" />
            <!--  Der Aendern- und der Loeschen-Command übergaben als Parameter das in dem DataGrid ausgewählte Objekt  -->
            <Button
                x:Name="Btn_Aendern"
                Command="{Binding AendernCmd}"
                CommandParameter="{Binding ElementName=Dgd_Personen, Path=SelectedItem}"
                Content="Ändere Person" />
            <Button
                x:Name="Btn_Loeschen"
                Command="{Binding LoeschenCmd}"
                CommandParameter="{Binding ElementName=Dgd_Personen, Path=SelectedItem}"
                Content="Lösche Person" />
        </WrapPanel>

        <!--
            DataGrids werden zur Visualisierung komplexer Datenlisten verwendet. Die ItemSource-Property ist
            über eine Kurzbindung an den DataContext gebunden. Die einzelnen Eigenschaften der Objekte (vgl. die
            Column-Einträge) sind per Kurzbindungen an die ItemSource gebunden.
            Mit AutoGenerateColumns="False" verhindert man eine automatische Generierung der Spalten.
            IsReadOnly="True" führen dazu, dass der Benutzer die Einträge nicht direkt bearbeiten kann.
            Setzt man sowohl Background, als auch AlternatingRowBackground, wechseln sich die Zeilen ihre Farbe
            betreffend ab.
        -->
        <DataGrid
            x:Name="Dgd_Personen"
            Margin="10"
            AutoGenerateColumns="False"
            IsReadOnly="True"
            ItemsSource="{Binding Personenliste}">

            <b:Interaction.Triggers>
                <b:EventTrigger EventName="MouseDoubleClick">
                    <b:InvokeCommandAction Command="{Binding AendernCmd}" CommandParameter="{Binding ElementName=Dgd_Personen, Path=SelectedItem}" />
                </b:EventTrigger>
            </b:Interaction.Triggers>

            <!--  In der Columns-Property definiert man die benötigten Spalten und bindet diese an die ItemSource  -->
            <DataGrid.Columns>
                <DataGridTextColumn
                    Width="*"
                    Binding="{Binding Vorname}"
                    Header="Vorname" />
                <DataGridTextColumn
                    Width="*"
                    Binding="{Binding Nachname}"
                    Header="Nachname" />
                <DataGridTextColumn
                    Width="Auto"
                    Binding="{Binding Geschlecht}"
                    Header="Geschlecht" />
                <DataGridTextColumn
                    Width="Auto"
                    Binding="{Binding Geburtsdatum, StringFormat=dd.MM.yyyy}"
                    Header="Geburtsdatum" />
                <DataGridTextColumn
                    Width="Auto"
                    Binding="{Binding Kinder}"
                    Header="Kinder" />
                <DataGridTextColumn
                    Width="Auto"
                    Binding="{Binding Lieblingsfarbe}"
                    Header="Lieblingsfarbe">
                    <!--  Mithilfe der CellStyle-Property können die Styles von Zellen angepasst werden  -->
                    <DataGridTextColumn.CellStyle>
                        <Style TargetType="DataGridCell">
                            <Setter Property="Background" Value="{Binding Lieblingsfarbe, Converter={StaticResource color2brush}}" />
                        </Style>
                    </DataGridTextColumn.CellStyle>
                </DataGridTextColumn>
                <DataGridCheckBoxColumn
                    Width="Auto"
                    Binding="{Binding Verheiratet}"
                    Header="Verheiratet" />
            </DataGrid.Columns>
        </DataGrid>
    </DockPanel>

</Window>
