<Window
    x:Class="M14_Lab.View.DetailView"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:conv="clr-namespace:M14_Lab.Converter"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:local="clr-namespace:M14_Lab.View"
    xmlns:main="clr-namespace:M14_Lab"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    xmlns:sys="clr-namespace:System;assembly=mscorlib"
    xmlns:uc="clr-namespace:M11_Lib;assembly=M11_Lib"
    xmlns:vm="clr-namespace:M14_Lab.ViewModel"
    x:Name="Wnd_Detail"
    Title="Neue Person"
    Width="300"
    Height="300"
    ResizeMode="NoResize"
    Style="{StaticResource Sty_Wnd}"
    Topmost="True"
    WindowStartupLocation="CenterScreen"
    mc:Ignorable="d">

    <Window.Resources>
        <conv:GenderToBoolConverter x:Key="gender2bool" />
        <conv:ColorToIndexerConverter x:Key="color2index" />

        <!--
            ObjectDataPropviders können Klassen und Objekte zu in XAML verwendbaren Elementen, wie
            z.B. Listen aufbereiten.
            Dieser ODP sorgt dafür, dass die Colors-Klasse in XAML zugänglich ist. Dazu benutzt er seine
            GetType-Methode. Die MethodParameter dafinieren, welche Klasse er aufbereiten soll.
        -->
        <ObjectDataProvider
            x:Key="Odp_Colors"
            MethodName="GetType"
            ObjectType="{x:Type sys:Type}">
            <ObjectDataProvider.MethodParameters>
                <sys:String>System.Windows.Media.Colors, PresentationCore, Version=3.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35</sys:String>
            </ObjectDataProvider.MethodParameters>
        </ObjectDataProvider>

        <!--  Objekt zur Bereitstellung der Properties der Colors-Klasse (vordefinierte Farben)  -->
        <ObjectDataProvider
            x:Key="Odp_ColorsProperties"
            MethodName="GetProperties"
            ObjectInstance="{StaticResource Odp_Colors}" />

        <!--  Error-Template für den Fall einer fehlerhaften Eingabe in einzelnen Controls  -->
        <ControlTemplate x:Key="CtpError">
            <StackPanel Orientation="Horizontal">
                <Border
                    x:Name="BdrAep"
                    BorderBrush="Red"
                    BorderThickness="1">
                    <AdornedElementPlaceholder x:Name="Aep" />
                </Border>
                <TextBlock
                    Margin="3,0"
                    VerticalAlignment="Center"
                    FontSize="{StaticResource double_FontSize}"
                    FontWeight="Bold"
                    Foreground="Red"
                    Text="!" />
                <Popup
                    AllowsTransparency="True"
                    IsOpen="{Binding ElementName=Aep, Path=AdornedElement.IsMouseOver, Mode=OneWay}"
                    Placement="Bottom"
                    PlacementTarget="{Binding ElementName=BdrAep}"
                    PopupAnimation="Slide">
                    <TextBlock
                        Padding="2"
                        Background="Red"
                        FontSize="{StaticResource double_FontSize}"
                        Foreground="White"
                        Text="{Binding ElementName=Aep, Path=AdornedElement.(Validation.Errors)[0].ErrorContent}" />
                </Popup>
            </StackPanel>
        </ControlTemplate>

    </Window.Resources>

    <!--  Das zugehörige ViewModel dient dieser Seite als DatenKontext  -->
    <Window.DataContext>
        <vm:DetailViewModel />
    </Window.DataContext>

    <Grid Margin="10">
        <!--  Grid-Spalten- und Reihen-Definitionen  -->
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="Auto" />
            <ColumnDefinition Width="*" />
        </Grid.ColumnDefinitions>
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto" />
            <RowDefinition Height="Auto" />
            <RowDefinition Height="Auto" />
            <RowDefinition Height="Auto" />
            <RowDefinition Height="Auto" />
            <RowDefinition Height="Auto" />
            <RowDefinition Height="Auto" />
            <RowDefinition Height="*" />
        </Grid.RowDefinitions>

        <!--  linke Spalte (nur statische Stringanzeigen)  -->
        <TextBlock Text="Vorname:" />
        <TextBlock Grid.Row="1" Text="Nachname:" />
        <TextBlock Grid.Row="2" Text="Geburtsdatum:" />
        <TextBlock Grid.Row="3" Text="Verheiratet:" />
        <TextBlock Grid.Row="4" Text="Lieblingsfarbe:" />
        <TextBlock
            Grid.Row="5"
            VerticalAlignment="Top"
            Text="Geschlecht:" />
        <TextBlock Grid.Row="6" Text="Kinder:" />

        <!--
            rechte Spalte (Eingabefelder)
            Bindungen erfolgen an Eigenschaften (z.B. Vorname) einer Property (NeuePerson) aus dem DataContext.
            Zur Verwendung des Validierungs-Interfaces wurde ValidatesOnDataErrors gesetzt.
        -->
        <TextBox
            x:Name="Tbx_Vorname"
            Grid.Column="1"
            Text="{Binding NeuePerson.Vorname, UpdateSourceTrigger=PropertyChanged, ValidatesOnDataErrors=True}"
            Validation.ErrorTemplate="{StaticResource CtpError}" />

        <TextBox
            x:Name="Tbx_Nachname"
            Grid.Row="1"
            Grid.Column="1"
            Text="{Binding NeuePerson.Nachname, UpdateSourceTrigger=PropertyChanged, ValidatesOnDataErrors=True}"
            Validation.ErrorTemplate="{StaticResource CtpError}" />

        <DatePicker
            x:Name="Dpr_Geburtsdatum"
            Grid.Row="2"
            Grid.Column="1"
            SelectedDate="{Binding NeuePerson.Geburtsdatum, UpdateSourceTrigger=PropertyChanged, ValidatesOnDataErrors=True}"
            Validation.ErrorTemplate="{StaticResource CtpError}" />

        <CheckBox
            x:Name="Cbx_Verheiratet"
            Grid.Row="3"
            Grid.Column="1"
            IsChecked="{Binding NeuePerson.Verheiratet, UpdateSourceTrigger=PropertyChanged}" />

        <!--
            Die ComboBox holt sich die Farben über den oben definierten ObjektDataProvider, welcher hier als
            ItemSource gesetzt wurde. Mittels der Eigenschaft SelectedPathValue kann definiert werden, welche die
            Eigenschaften des ODP in der Auswahl verwendet werden soll. Beachte, dass auch das Rechteck und die
            Textbox aus dem ItemTemplate an diese ausgewählte Eigenschaft gebunden sind.
        -->
        <ComboBox
            x:Name="Cbb_Lieblingsfarbe"
            Grid.Row="4"
            Grid.Column="1"
            ItemsSource="{Binding Source={StaticResource Odp_ColorsProperties}}"
            SelectedIndex="{Binding NeuePerson.Lieblingsfarbe, Converter={StaticResource color2index}, ConverterParameter={StaticResource Odp_ColorsProperties}, ValidatesOnDataErrors=True}"
            SelectedValue="{Binding NeuePerson.Lieblingsfarbe, UpdateSourceTrigger=PropertyChanged, ValidatesOnDataErrors=True}"
            SelectedValuePath="Name"
            Validation.ErrorTemplate="{StaticResource CtpError}">
            <ComboBox.ItemTemplate>
                <!--  Diese ItemTemplate stellt vor dem entsprechenden Farbnamen ein Recteck in dieser Farbe dar  -->
                <DataTemplate>
                    <StackPanel Orientation="Horizontal">
                        <Border
                            Width="20"
                            Height="20"
                            Margin="5,0"
                            BorderBrush="Black"
                            BorderThickness="1">
                            <Rectangle
                                Width="20"
                                Height="20"
                                Fill="{Binding Name}" />
                        </Border>
                        <TextBlock Text="{Binding Name}" />
                    </StackPanel>
                </DataTemplate>
            </ComboBox.ItemTemplate>
        </ComboBox>

        <!--
            Die RadioButtons übermitteln an den Konverter den ihnen zugeteilten Enumerator-Zustand über den
            ConverterParameter. Dadurch muss der Konverter diese nur noch mit der ausgewählten Eigenschaft vergleichen.
        -->
        <StackPanel
            Grid.Row="5"
            Grid.Column="1"
            Margin="2">
            <RadioButton
                Content="M"
                GroupName="Rbg_Gender"
                IsChecked="{Binding NeuePerson.Geschlecht, UpdateSourceTrigger=PropertyChanged, Converter={StaticResource gender2bool}, ConverterParameter={x:Static main:Gender.Männlich}}" />
            <RadioButton
                Content="W"
                GroupName="Rbg_Gender"
                IsChecked="{Binding NeuePerson.Geschlecht, UpdateSourceTrigger=PropertyChanged, Converter={StaticResource gender2bool}, ConverterParameter={x:Static main:Gender.Weiblich}}" />
            <RadioButton
                Content="D"
                GroupName="Rbg_Gender"
                IsChecked="{Binding NeuePerson.Geschlecht, UpdateSourceTrigger=PropertyChanged, Converter={StaticResource gender2bool}, ConverterParameter={x:Static main:Gender.Divers}}" />
        </StackPanel>

        <uc:IntegerUpDown
            x:Name="Iud_Kinder"
            Grid.Row="6"
            Grid.Column="1"
            Height="25"
            Margin="2"
            Validation.ErrorTemplate="{StaticResource CtpError}"
            Value="{Binding NeuePerson.Kinder, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay, ValidatesOnDataErrors=True}" />

        <WrapPanel
            Grid.Row="7"
            Grid.ColumnSpan="2"
            Margin="0,5"
            HorizontalAlignment="Right">
            <!--  Den Buttons wird als CommandParameter das Fenster übergeben, damit im ViewModel dessen Close-Befehl verwendet werden kann  -->
            <Button
                x:Name="Btn_Ok"
                Command="{Binding OkCmd}"
                CommandParameter="{Binding ElementName=Wnd_Detail}"
                Content="OK">
                <Button.Style>
                    <!--
                        In diesem ButtonStyle wurden diverse Trigger definiert. Diese sorgen dafür, dass der Button erst verfügbar
                        wird, wenn keines der obigen Elemente eine fehlerhafte Validierung meldet. Dies könnte aud durch die CanExecute-
                        Methode des Commands gesteuert werden, ist auf diese Weise jedoch einfacher
                    -->
                    <Style BasedOn="{StaticResource Sty_Btn_Base}" TargetType="Button">

                        <Setter Property="IsEnabled" Value="False" />

                        <Style.Triggers>
                            <MultiDataTrigger>
                                <MultiDataTrigger.Conditions>
                                    <Condition Binding="{Binding ElementName=Tbx_Vorname, Path=(Validation.HasError)}" Value="False" />
                                    <Condition Binding="{Binding ElementName=Tbx_Nachname, Path=(Validation.HasError)}" Value="False" />
                                    <Condition Binding="{Binding ElementName=Dpr_Geburtsdatum, Path=(Validation.HasError)}" Value="False" />
                                    <Condition Binding="{Binding ElementName=Cbb_Lieblingsfarbe, Path=(Validation.HasError)}" Value="False" />
                                    <Condition Binding="{Binding ElementName=Iud_Kinder, Path=(Validation.HasError)}" Value="False" />
                                </MultiDataTrigger.Conditions>

                                <Setter Property="IsEnabled" Value="True" />

                            </MultiDataTrigger>
                        </Style.Triggers>
                    </Style>
                </Button.Style>
            </Button>
            <Button
                x:Name="Btn_Abbruch"
                Command="{Binding AbbruchCmd}"
                CommandParameter="{Binding ElementName=Wnd_Detail}"
                Content="Abbrechen" />
        </WrapPanel>
    </Grid>
</Window>
