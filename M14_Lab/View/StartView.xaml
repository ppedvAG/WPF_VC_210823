<Window
    x:Class="M14_Lab.View.StartView"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:local="clr-namespace:M14_Lab.View"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    xmlns:vm="clr-namespace:M14_Lab.ViewModel"
    x:Name="Wnd_Start"
    Title="Personendatenbank"
    Width="370"
    Height="170"
    Style="{StaticResource Sty_Wnd}"
    mc:Ignorable="d">

    <!--
        Im View-Teil von MVVM-Projekten werden die Fenster per XAML definiert. Diese Klassen dürfen keinen Code-Behind
        besitzen. Diese Aufgabe wird von dem entsprechenden ViewModel übernommen, welches als DataContext des Views gesetzt
        wird. Dies geschieht hier, im ersten Fenster des Programms, inner halb des XAML-Codes.
    -->
    <Window.DataContext>
        <vm:StartViewModel />
    </Window.DataContext>

    <!--  Die Eigenschaften werden über Kurzbindungen an den DataContext (das ViewModel) gebunden.  -->
    <StackPanel Margin="10">
        <TextBlock
            HorizontalAlignment="Center"
            FontSize="30"
            Text="Personendatenbank" />

        <WrapPanel Margin="10" HorizontalAlignment="Center">
            <Button Command="{Binding LadeDbCmd}" Content="Lade DB" />

            <!--
                Das OeffneDbCmd bekommt über den Parameter das aktuelle View mit übergeben, damit dessen
                Close-Methode ausgeführt werden kann.
            -->
            <Button
                Command="{Binding OeffneDbCmd}"
                CommandParameter="{Binding ElementName=Wnd_Start}"
                Content="Öffne DB" />
        </WrapPanel>

        <TextBlock HorizontalAlignment="Center" Text="{Binding AnzahlPersonen, StringFormat=Es wurden {0} Personen geladen.}" />
    </StackPanel>
</Window>
