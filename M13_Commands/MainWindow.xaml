<Window
    x:Class="M13_Commands.MainWindow"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:b="http://schemas.microsoft.com/xaml/behaviors"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:local="clr-namespace:M13_Commands"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    x:Name="Wnd_Main"
    Title="MainWindow"
    Width="390"
    Height="390"
    mc:Ignorable="d">

    <!--
        Commands sind Light-Events, welche man über Xaml einbindet und die in
        einer eigenen Klasse definiert werden. Jeder Command besitzt eine Methode,
        in welcher sich der auszuführende Code befindet und eine Methode, welche
        überprüft, ob der Command gerade ausgeführt werden darf.
        Bestimmte Commands (s.u.) sind bereits vordefiniert.
    -->
    <Window.CommandBindings>
        <CommandBinding Command="Cut" />
        <CommandBinding Command="Copy" />
        <CommandBinding Command="Paste" />
    </Window.CommandBindings>

    <Window.InputBindings>
        <KeyBinding
            Key="W"
            Command="{Binding CloseCmd}"
            CommandParameter="{Binding ElementName=Wnd_Main}"
            Modifiers="Ctrl" />
        <KeyBinding
            Key="N"
            Command="{Binding OeffnenCmd}"
            CommandParameter="{Binding ElementName=Tbx_Input, Path=Text}"
            Modifiers="Ctrl" />
    </Window.InputBindings>

    <StackPanel>
        <TextBox
            x:Name="Tbx_Input"
            Height="100"
            AcceptsReturn="True">
            <TextBox.ContextMenu>
                <ContextMenu>
                    <!--  Verwendung der voreingestellten Commands  -->
                    <MenuItem Command="Cut" />
                    <MenuItem Command="Copy" />
                    <MenuItem Command="Paste" />
                </ContextMenu>
            </TextBox.ContextMenu>

            <!--
                Mittels Interaction.Triggers aus dem Behaviors-Namespace kann jedes beliebige RoutedEvent
                auf ein Command umgeleitet werden
            -->
            <b:Interaction.Triggers>
                <b:EventTrigger EventName="MouseDoubleClick">
                    <b:InvokeCommandAction Command="{Binding CloseCmd}" CommandParameter="{Binding ElementName=Wnd_Main}" />
                </b:EventTrigger>
            </b:Interaction.Triggers>
        </TextBox>

        <!--  Verwendung von eigenen Commands aus dem CodeBehind  -->
        <Button
            Command="{Binding CloseCmd}"
            CommandParameter="{Binding ElementName=Wnd_Main}"
            Content="Schließen" />
        <Button
            Command="{Binding OeffnenCmd}"
            CommandParameter="{Binding ElementName=Tbx_Input, Path=Text}"
            Content="Öffnen" />

    </StackPanel>
</Window>
