<Window
    x:Class="M02_Controls.MainWindow"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:local="clr-namespace:M02_Controls"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    x:Name="Wnd_Main"
    Title="Controls Demo"
    Width="800"
    Height="450"
    WindowStartupLocation="CenterScreen"
    WindowStyle="None"
    mc:Ignorable="d">
    <StackPanel>
        <!--
            Labels besitzen, wie die meisten Controls und alle Container eine Content-Eigenschaft, welche
            mit weiteren Containern/Controls befüllt werden können (Auch hier darf nur ein Root-Element vohanden sein).
        -->
        <Label
            x:Name="Lbl_Output"
            HorizontalAlignment="Center"
            BorderBrush="Black"
            BorderThickness="1"
            Content="Hallo, ich bin ein String"
            FontSize="25"
            Foreground="Red" />

        <!--
            TextBlöcke sind Labels, welche auf Strings spezialisiert sind. Sie besitzen statt der
            Content- die Text-Property
        -->
        <TextBlock
            x:Name="Tbl_Strings"
            FontFamily="Comic Sans MS"
            Text="Ich bin auch ein String" />

        <!--  Buttons können von den Usern angeklickt werden, wodurch das Click-Event ausgelöst wird (vgl. CB)  -->

        <!--
            Mittels des Image-Objekts können Grafiken angezeigt und formatiert werden.
            Möglichkeiten zum Anzeigen:
            1. Content: Attribute Source + Build Action Content (Source nicht in Assembly eingebettet!)
            2. Referenzierung mit URI Syntax: Source="pack://application:,,,/Images/ppedv.bmp"
            3. Embedded Resource: Build Action Embedded Resource + Code Snippet
        -->
        <!--<Image
            x:Name="Img_ppedv"
            Height="60"
            Source="Images/ppedv.bmp"
            Stretch="Uniform" />-->
        <Image
            x:Name="Img_ppedv"
            Height="60"
            Stretch="Uniform" />

        <Button
            x:Name="Btn_KlickMich"
            Width="100"
            Click="Btn_KlickMich_Click"
            Content="Klick mich">

            <Button.Resources>
                <Style TargetType="{x:Type Border}">
                    <Setter Property="CornerRadius" Value="10" />
                </Style>
            </Button.Resources>

        </Button>

        <!--
            In einer Textbox kann der User Strings eingeben. Mittels AcceptsReturn wird die Return-Taste für Zeilenumbrüche
            freigegeben.
        -->
        <TextBox
            x:Name="Tbx_Input"
            Height="60"
            AcceptsReturn="True"
            AcceptsTab="True"
            Text="Hallo"
            TextWrapping="WrapWithOverflow"
            VerticalScrollBarVisibility="Visible">
            <TextBox.ContextMenu>
                <!--  Die meisten Steuerelemente haben eine ContextMenu-Property, in welche ein ContextMenu eingepflegt werden kann (vgl. Menu).  -->
                <ContextMenu>
                    <MenuItem Header="Kopieren" />
                    <MenuItem Header="Einfügen" />
                </ContextMenu>
            </TextBox.ContextMenu>
        </TextBox>

        <!--
            ItemControls wie ComboBoxen oder ListViews können über die ItemsSource-Property mit Daten
            oder in XAML mit Items mit Content-Property bestückt werden
        -->
        <ComboBox x:Name="Cbb_Auswahl" IsEditable="True">
            <ComboBoxItem Content="Item1" />
            <ComboBoxItem Content="Eintrag2" />
            <ComboBoxItem Content="Auswahl3" />
        </ComboBox>

        <!--
            Checkboxen sind visuelle Repräsentationen von boolschen Werten. Mittels IsThreeState kann eine Checkbox einen von DREI
            unterschiedlichen Zuständen annehmen.
        -->
        <CheckBox
            x:Name="Cbx_Haken"
            Content="Hak mich ab"
            IsChecked="{x:Null}" />

        <!--  RadioButtons können einer Group zugeordnet werden, wodurch nur einer der Buttons angewählt sein darf  -->
        <RadioButton Content="Auswahl1" GroupName="Rbt_Group_1" />
        <RadioButton Content="Auswahl2" GroupName="Rbt_Group_1" />
        <RadioButton Content="Auswahl3" GroupName="Rbt_Group_2" />
        <RadioButton Content="Auswahl4" GroupName="Rbt_Group_2" />

        <!--
            Mittels Slidern kann der User einen numerischen Wert im definierten Bereich auswählen. Die Ticks geben dabei Hilfestellung
            und definieren die auswählbareb Zahlenwerte.
        -->
        <Slider
            x:Name="Sdr_Wert"
            IsSnapToTickEnabled="True"
            Maximum="100"
            Minimum="0"
            TickFrequency="10"
            TickPlacement="BottomRight"
            Value="30" />

        <!--  Seperatoren sind visuelle Abgrenzungen  -->
        <Separator Margin="10" />

        <!--
            Mittels der ProgressBar können prozentuale Fortschritte visualisiert werden. Mit IsIndeterminate kann ein bewegender Balken
            dargestellt werden.
        -->
        <ProgressBar
            Height="10"
            IsIndeterminate="True"
            Maximum="100"
            Minimum="0"
            Value="50" />

        <!--
            Menüs, wie ein Fenster-Menü (Menu) oder ein Kontext-Menü (ContextMenu) werden mit MenuItems befüllt.
            Diese können ihrerseits weitere MenuItems aufnehmen, wodurch sich dann Untermenüs bilden
        -->
        <Menu>
            <MenuItem Header="Datei">
                <MenuItem Header="Neu">
                    <MenuItem Click="Neu_MenuItem_Click" Header="Neu" />
                    <MenuItem Header="Dialog" />
                </MenuItem>
                <MenuItem Header="Speichern" />
                <MenuItem Click="Beenden_MenuItem_Click" Header="Schließen" />
            </MenuItem>
            <MenuItem Header="Hilfe" />
        </Menu>

        <!--  Ribbons sind die 'neuen' MS-Menüs. Sie sind zu finden unter dem Namespace System.Windows.Controls.Ribbon  -->
        <Ribbon>
            <Ribbon.ApplicationMenu>
                <RibbonApplicationMenu>
                    <RibbonApplicationMenuItem Header="Speichern" />
                </RibbonApplicationMenu>
            </Ribbon.ApplicationMenu>

            <RibbonTab Header="Ansicht">
                <RibbonGroup Header="Listenansicht">
                    <RibbonCheckBox />
                    <RibbonComboBox />
                    <RibbonButton />
                </RibbonGroup>
            </RibbonTab>
        </Ribbon>
    </StackPanel>
</Window>
